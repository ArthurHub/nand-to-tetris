// bootstrap
@256
D=A
@SP
M=D
@LCL
M=D
@ARG
M=D-1
@4000
D=A
@THIS
M=D
@5000
D=A
@THAT
M=D
// bootstrap call Sys.init
@FUNC_RETURN_Sys.init_line0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@LCL
M=D
@5
D=A
@SP
D=M-D
@ARG
M=D
@FUNC_Sys.init
0;JMP
(FUNC_RETURN_Sys.init_line0)
// infinite loop
(INFILOOP_FibonacciElement)
@INFILOOP_FibonacciElement
0;JMP
// end bootstrap
// function Main.fibonacci 0
(FUNC_Main.fibonacci)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@IF_Main_13
D;JLT
D=0
@IFEND_Main_13
0;JMP
(IF_Main_13)
D=-1
(IFEND_Main_13)
@SP
A=M-1
M=D
// if-goto IF_TRUE
@SP
M=M-1
A=M
D=M
@Main_IF_TRUE
D;JNE
// goto IF_FALSE
@Main_IF_FALSE
0;JMP
// label IF_TRUE
(Main_IF_TRUE)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@SP
M=M-1
A=M
D=M
@R13
M=D
@ARG
D=M
@R14
M=D
@LCL
D=M
@SP
M=D
@SP
M=M-1
A=M
D=M
@THAT
M=D
@SP
M=M-1
A=M
D=M
@THIS
M=D
@SP
M=M-1
A=M
D=M
@ARG
M=D
@SP
M=M-1
A=M
D=M
@LCL
M=D
@SP
M=M-1
A=M
D=M
@R15
M=D
@R14
D=M
@SP
M=D
@R13
D=M
@SP
A=M
M=D
@SP
M=M+1
@R15
A=M
0;JMP
// label IF_FALSE
(Main_IF_FALSE)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// call Main.fibonacci 1
@FUNC_RETURN_Main.fibonacci_line23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@LCL
M=D
@6
D=A
@SP
D=M-D
@ARG
M=D
@FUNC_Main.fibonacci
0;JMP
(FUNC_RETURN_Main.fibonacci_line23)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// call Main.fibonacci 1
@FUNC_RETURN_Main.fibonacci_line27
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@LCL
M=D
@6
D=A
@SP
D=M-D
@ARG
M=D
@FUNC_Main.fibonacci
0;JMP
(FUNC_RETURN_Main.fibonacci_line27)
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M+D
// return
@SP
M=M-1
A=M
D=M
@R13
M=D
@ARG
D=M
@R14
M=D
@LCL
D=M
@SP
M=D
@SP
M=M-1
A=M
D=M
@THAT
M=D
@SP
M=M-1
A=M
D=M
@THIS
M=D
@SP
M=M-1
A=M
D=M
@ARG
M=D
@SP
M=M-1
A=M
D=M
@LCL
M=D
@SP
M=M-1
A=M
D=M
@R15
M=D
@R14
D=M
@SP
M=D
@R13
D=M
@SP
A=M
M=D
@SP
M=M+1
@R15
A=M
0;JMP
// function Sys.init 0
(FUNC_Sys.init)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1
@FUNC_RETURN_Main.fibonacci_line12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@LCL
M=D
@6
D=A
@SP
D=M-D
@ARG
M=D
@FUNC_Main.fibonacci
0;JMP
(FUNC_RETURN_Main.fibonacci_line12)
// label WHILE
(Sys_WHILE)
// goto WHILE
@Sys_WHILE
0;JMP
